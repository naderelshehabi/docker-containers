# This file uses variable substitution
# To deploy to docker swarm use the following command
# docker stack deploy -c <(docker-compose --env-file docker.env config) cockroachdb

version: "3.9"

services:
  pgadmin:
    image: dpage/pgadmin4:${PGADMIN_TAG}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        order: stop-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 0
        order: stop-first

      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 64M

      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.pgadmin.rule=PathPrefix(`/pgadmin`)"
        - "traefik.http.routers.pgadmin.entrypoints=websecure"
        - "traefik.http.routers.pgadmin.middlewares=pgadmin-compress"
        - "traefik.http.services.pgadmin-service.loadbalancer.server.port=80"
        - "traefik.http.middlewares.pgadmin-compress.compress=true"

    environment:
      SCRIPT_NAME: /pgadmin

    entrypoint: /pgadmin-entrypoint.sh

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --no-verbose --tries=1 --spider http://localhost/pgadmin/misc/ping || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

    volumes:
      - ./scripts/pgadmin-entrypoint.sh:/pgadmin-entrypoint.sh:ro
      - pgadmin:/var/lib/pgadmin

    secrets:
      - source: pgadmin-user
        target: pgadmin_user
      - source: pgadmin-password
        target: pgadmin_password

    networks:
      - backend

  cockroachdb-1:
    image: cockroachdb/cockroach:${COCKROACHDB_TAG}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 5s
        order: stop-first
        failure_action: rollback
        monitor: 60s
      rollback_config:
        parallelism: 0
        order: stop-first

      resources:
        limits:
          # cpus: "1.0"
          memory: 4096M
        reservations:
          # cpus: "0.25"
          memory: 1024M

      labels:
        - "traefik.enable=true"

        - "traefik.http.routers.cockroachdb-admin.rule=Host(`${URL}`)"
        - "traefik.http.routers.cockroachdb-admin.service=cockroachdb-admin"
        - "traefik.http.routers.cockroachdb-admin.entrypoints=websecure"
        - "traefik.http.routers.cockroachdb-admin.middlewares=cockroachdb-compress"

        - "traefik.http.services.cockroachdb-admin.loadbalancer.server.scheme=https"
        - "traefik.http.services.cockroachdb-admin.loadbalancer.server.port=8080"
        - "traefik.http.services.cockroachdb-admin.loadBalancer.sticky.cookie"

        - "traefik.http.middlewares.cockroachdb-compress.compress=true"

        - "traefik.tcp.routers.cockroachdb.rule=HostSNI(`*`)"
        - "traefik.tcp.routers.cockroachdb.entrypoints=cockroachdb"
        - "traefik.tcp.routers.cockroachdb.service=cockroachdb-service"
        - "traefik.tcp.services.cockroachdb-service.loadbalancer.server.port=26257"

    stop_grace_period: 60s

    volumes:
      - cockroachdb-1:/cockroach/cockroach-data
      - ./init.sh:/init.sh

    networks:
      - backend

    secrets:
      - source: ca-cert
        target: ca.crt
      - source: ca-key
        target: ca.key
      - source: root-cert
        target: client.root.crt
      - source: root-key
        target: client.root.key
        mode: 0600
      - source: roach-pass
        target: roach_pass.txt

    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

    entrypoint: bash

    command: >
      -c "
        ( /init.sh ) & \
        cockroach cert create-node cockroachdb-1 localhost 127.0.0.1 --certs-dir=/run/secrets --ca-key=/run/secrets/ca.key && \
        cockroach start --advertise-addr=cockroachdb-1 --join=cockroachdb-1:26257,cockroachdb-2:26257,cockroachdb-3:26257 --cache=.25 --max-sql-memory=.25 --logtostderr --certs-dir=/run/secrets
      "

  cockroachdb-2:
    image: cockroachdb/cockroach:${COCKROACHDB_TAG}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 60s
        order: stop-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 0
        order: stop-first

      resources:
        limits:
          # cpus: "1.00"
          memory: 4096M
        reservations:
          # cpus: "0.25"
          memory: 1024M

      labels:
        - "traefik.enable=true"

        - "traefik.http.services.cockroachdb-admin.loadbalancer.server.scheme=https"
        - "traefik.http.services.cockroachdb-admin.loadbalancer.server.port=8080"
        - "traefik.http.services.cockroachdb-admin.loadBalancer.sticky.cookie"

        - "traefik.tcp.routers.cockroachdb.rule=HostSNI(`*`)"
        - "traefik.tcp.routers.cockroachdb.entrypoints=cockroachdb"
        - "traefik.tcp.routers.cockroachdb.service=cockroachdb-service"
        - "traefik.tcp.services.cockroachdb-service.loadbalancer.server.port=26257"

    stop_grace_period: 60s

    volumes:
      - cockroachdb-2:/cockroach/cockroach-data

    networks:
      - backend

    secrets:
      - source: ca-cert
        target: ca.crt
      - source: ca-key
        target: ca.key
      - source: root-cert
        target: client.root.crt
      - source: root-key
        target: client.root.key
        mode: 0600

    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

    entrypoint: bash

    command: >
      -c "
        cockroach cert create-node cockroachdb-2 localhost 127.0.0.1 --certs-dir=/run/secrets --ca-key=/run/secrets/ca.key && \
        cockroach start --advertise-addr=cockroachdb-2 --join=cockroachdb-1:26257,cockroachdb-2:26257,cockroachdb-3:26257 --cache=.25 --max-sql-memory=.25 --logtostderr --certs-dir=/run/secrets
      "

  cockroachdb-3:
    image: cockroachdb/cockroach:${COCKROACHDB_TAG}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 90s
        order: stop-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 0
        order: stop-first

      resources:
        limits:
          # cpus: "1.00"
          memory: 4096M
        reservations:
          # cpus: "0.25"
          memory: 1024M

      labels:
        - "traefik.enable=true"

        - "traefik.http.services.cockroachdb-admin.loadbalancer.server.scheme=https"
        - "traefik.http.services.cockroachdb-admin.loadbalancer.server.port=8080"
        - "traefik.http.services.cockroachdb-admin.loadBalancer.sticky.cookie"

        - "traefik.tcp.routers.cockroachdb.rule=HostSNI(`*`)"
        - "traefik.tcp.routers.cockroachdb.entrypoints=cockroachdb"
        - "traefik.tcp.routers.cockroachdb.service=cockroachdb-service"
        - "traefik.tcp.services.cockroachdb-service.loadbalancer.server.port=26257"

    stop_grace_period: 60s

    volumes:
      - cockroachdb-3:/cockroach/cockroach-data

    networks:
      - backend

    secrets:
      - source: ca-cert
        target: ca.crt
      - source: ca-key
        target: ca.key
      - source: root-cert
        target: client.root.crt
      - source: root-key
        target: client.root.key
        mode: 0600

    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

    entrypoint: bash

    command: >
      -c "
        cockroach cert create-node cockroachdb-3 localhost 127.0.0.1 --certs-dir=/run/secrets --ca-key=/run/secrets/ca.key && \
        cockroach start --advertise-addr=cockroachdb-3 --join=cockroachdb-1:26257,cockroachdb-2:26257,cockroachdb-3:26257 --cache=.25 --max-sql-memory=.25 --logtostderr --certs-dir=/run/secrets
      "

volumes:
  pgadmin: {}
  cockroachdb-1: {}
  cockroachdb-2: {}
  cockroachdb-3: {}

# Create this as driver=Overlay scope=swarm before deploying
networks:
  backend:
    external: true

secrets:
  pgadmin-user:
    name: ${pgadmin_user}
    file: ${pgadmin_user_file}
  pgadmin-password:
    name: ${pgadmin_password}
    file: ${pgadmin_password_file}
  ca-cert:
    name: ${CA_CERT}
    file: ${CA_CERT_FILE}
  ca-key:
    name: ${CA_KEY}
    file: ${CA_KEY_FILE}
  root-cert:
    name: ${ROOT_CERT}
    file: ${ROOT_CERT_FILE}
  root-key:
    name: ${ROOT_KEY}
    file: ${ROOT_KEY_FILE}
  roach-pass:
    name: ${ROACH_PASS}
    file: ${ROACH_PASS_FILE}
