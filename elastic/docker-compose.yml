# This file uses variable substitution
# To deploy to docker swarm use the following command
# docker stack deploy -c <(docker-compose --env-file docker.env config) elastic

version: "3.9"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${TAG}

    deploy:
      mode: replicated
      replicas: 1

      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 30s
        order: stop-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 0
        order: stop-first

      resources:
        limits:
          memory: 4096M
        reservations:
          memory: 512M

    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
      - elastic-cluster-config:/config
      - ./scripts/elasticsearch-entrypoint.sh:/etc/elasticsearch/elasticsearch-entrypoint.sh
      - ./scripts/elasticsearch-setup.sh:/etc/elasticsearch/elasticsearch-setup.sh
    
    networks:
      - backend

    command:
      - '/etc/elasticsearch/elasticsearch-entrypoint.sh'

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt -s https://localhost:9200 || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

    configs:
      - source: elasticsearch-config
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: elastic-cluster-instances
        target: /usr/share/elasticsearch/config/instances.yml

    secrets:
      - source: elastic-password
        target: elastic_password
        mode: 0400

###################################################################################################

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:${TAG}

  #   deploy:
  #     mode: replicated
  #     replicas: 1

  #     restart_policy:
  #       condition: on-failure
  #       delay: 10s
  #       max_attempts: 3
  #       window: 120s
  #     update_config:
  #       parallelism: 1
  #       delay: 30s
  #       order: stop-first
  #       failure_action: rollback
  #       monitor: 30s
  #     rollback_config:
  #       parallelism: 0
  #       order: stop-first

  #     resources:
  #       limits:
  #         memory: 1024M
  #       reservations:
  #         memory: 256M

  #     labels:
  #       - "traefik.enable=true"
  #       - "traefik.http.routers.kibana-http.rule=PathPrefix(`/kibana`)"
  #       - "traefik.http.routers.kibana-http.service=kibana"
  #       - "traefik.http.routers.kibana-http.entrypoints=websecure"
  #       - "traefik.http.routers.kibana-http.middlewares=kibana-compress"

  #       - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  #       - "traefik.http.middlewares.kibana-compress.compress=true"

  #   environment: 
  #     - KBN_PATH_CONF=/etc/kibana/

  #   networks:
  #     - backend

  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "wget --no-verbose --tries=1 --spider http://localhost:5601/kibana || exit 1",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  #   configs:
  #     - source: kibana-config
  #       target: /etc/kibana/kibana.yml
    
  #   secrets:
  #     - source: elastic-password
  #       target: elastic_password
  #       mode: 0400

networks:
  backend:
    external: true

volumes:
  elasticsearch: {}
  elastic-cluster-config: {}

configs:
  elasticsearch-config:
    name: ${elasticsearch_config}
    file: ${elasticsearch_config_file}
  elastic-cluster-instances:
    name: ${elastic_cluster_instances}
    file: ${elastic_cluster_instances_file}
  kibana-config:
      name: ${kibana_config}
      file: ${kibana_config_file}

secrets:
  elastic-password:
    name: ${elastic_password}
    file: ${elastic_password_file}